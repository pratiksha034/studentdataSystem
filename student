#include<stdio.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// number of students
int i=0;
// structure to store the student
struct student_info {
    char name[50];
    int contact_number;
    char DOB[20];
    char admission_date;
    int prn_number;
    int branch_code;
    int scholarship_eligible;
    char city[50];
    char scholarship_category[20];
    float percentage;
} st[70];
// function to add student
void add_student() {
    printf("Add the students details.\n");
    printf("‐--------‐‐--------‐-----------------------\n");
    printf("Student Name:\n");
    scanf("\n%[^\n]s",st[i].name);
    printf("contact number:\n");
    scanf("%d",&st[i].contact_number);
    printf("date of birthday[dd/mm/yy]:\n");
    scanf("%s",&st[i].DOB);
    printf("city of student:\n");
    scanf("%s",st[i].city);
    printf("Admission date[dd/mm/yy]:\n");
    scanf("%s",&st[i].admission_date);
    int roll;
    int isduplicate=0;
    do {
        printf("PRN Number:\n");
        scanf("%d",&roll);
        for(int j=0; j<i; j++) {
            isduplicate =0;
            if(roll==st[j].prn_number) {
                isduplicate=1;
                printf("The number is already exists"
                       "please enter unique number\n");
                break;
            }
        }
        if(!isduplicate) {
            st[i].prn_number=roll;
        }
    } while(isduplicate);
    printf("branch code\n[CSE=11,IT=12,ENTC=13,CE=14,ME=15]\n");

    scanf("%d",&st[i].branch_code);
    if(st[i].branch_code>15 || st[i].branch_code<11) {
        printf("Invalid code .Enter Valid branch code :\n");
        scanf("%d",&st[i].branch_code);
    }
    printf("Enter percentage :\n");
    scanf("%f",&st[i].percentage);
    if(st[i].percentage>100 || st[i].percentage<0) {
        printf("Invalid percentage .Enter Valid percentage:\n");
        scanf("%f",&st[i].percentage);
    }
    printf("scholarship eligibility\n[1=yes eligible,0=not eligible]:");
    scanf("%d",&st[i].scholarship_eligible);
    if(st[i].scholarship_eligible==1) {
        printf("scholarship category\n[EBC,EWS,OBC,MINORITY]:");
        scanf("%s",st[i].scholarship_category);
    }
    else if(st[i].scholarship_eligible==0) {
        printf("not eligible for scholarships\n");
    }

    i=i+1;
}
// Function to find student by roll number
void find_prn_number(int x) {

    for(int j=0 ; j<i; j++) {
        if(x==st[j].prn_number) {
            printf("Student details are\n");
            printf("Student Name=%s\n",st[j].name);
            printf("Contact number=%d\n",st[j].contact_number);
            printf("DOB=%s\n",st[j].DOB);
            printf("Admission date=%s\n",st[j].admission_date);
            printf("Student city=%s\n",st[j].city);
            printf("Branch code=%d\n",st[j].branch_code);
            printf("percentage=%f\n",st[j].percentage);
            if(st[j].scholarship_eligible==1) {
                printf("Eligible for scholarship\n");
                printf("scholarship category=%s\n",st[j].scholarship_category);
            }
            else {
                printf("Not eligible for scholarship\n");
            }
            return;
        }
        else {
            printf("PRN number is not found\n");
        }
    }
}
// function to find student by first name
void find_first_name() {
    char fname[50];
    printf("Enter first Name:\n");
    scanf("\n%[^\n]s",fname);
    for(int j=0; j<i; j++) {

        if(!strcmp(st[j].name,fname)) {
            printf("Student details are\n");
            printf("Student Name=%s\n",st[j].name);
            printf("Contact number=%d\n",st[j].contact_number);
            printf("DOB=%s\n",st[j].DOB);
            printf("Admission date=%s\n",st[j].admission_date);
            printf("Student city=%s\n",st[j].city);
            printf("PRN Number=%d\n",st[j].prn_number);
            printf("percentage=%f\n",st[j].percentage);
            if(st[j].scholarship_eligible==1) {
                printf("Eligible for scholarship\n");
                printf("scholarship category=%s\n",st[j].scholarship_category);
            }
            else {
                printf("Not eligible for scholarship\n");
            }

        }
        else {
            printf("First Name not found\n");
        }
    }
}
// function to find  number of students
void total_no_of_students() {
    printf("Total Number of Students=%d\n",i);
    printf("You can have %d more student.\n",70-i);
    int count=0;
    for(int j=0; j<i; j++) {
        if(st[j].scholarship_eligible==1)
            count=count+1;
    }
    printf("Number of student Eligible for scholarship=%d\n",count);
    printf("Number of student not Eligible for scholarship=%d\n",(i-count));

}
// function to student by course Id
void find_st_by_branch_code(int x) {
    int count=0;
    if (x<=15 || x>=11) {
        printf("Enter valid Branch Code\n");
        scanf("%d",&x);
    }
    for(int j=0; j<i; j++) {
        if(x==st[j].branch_code) {
            count=count+1;
        }
    }
    if(count>=1) {
        printf("total number of student=%d\n",count);
        printf("Do you want to detail of all student ?['Y'=YES ,'N'=NO]\n");
        char choice;
        scanf("%s",&choice);
        if(choice=='Y') {
            for(int j=0; j<i; j++) {
                if(x==st[j].branch_code) {
                    printf("Student Name=%s\n",st[j].name);
                    printf("Contact number=%d\n",st[j].contact_number);
                    printf("DOB=%s\n",st[j].DOB);
                    printf("Roll Number=%d\n",st[j].prn_number);
                    printf("percentage=%f\n",st[j].percentage);
                    if(st[j].scholarship_eligible==1) {
                        printf("Eligible for scholarship\n");
                        printf("scholarship category=%s\n",st[j].scholarship_category);
                    }
                    else {
                        printf("Not eligible for scholarship\n");
                    }
                    printf("*******\n");
                }
            }
        }
    }
    else {
        printf("No one is Found in this branch\n");
    }
}
// function to delete student by the roll number
void delete_student(int x) {

    for(int j=0; j<i; j++) {
        if(st[j].prn_number==x) {
            for(int k=i; k<i-1; k++) {
                st[k]=st[k+1];
            }
            i--;
        }
    }
    printf("Roll number %d is delete successfully!\n",x);
}
// function to update student by roll number
void update_student(int x) {

    for(int j=0; j<i; j++) {
        if(x==st[j].prn_number) {
            printf("Enter:\n1.Student contact number\n");
            printf("2. percentage \n");
            int z;
            scanf("%d",&z);
            switch(z) {
            case 1:
                printf("Enter new contact number:\n");
                scanf("%s",st[j].contact_number);
                break;
            case 3:
                printf("Enter new percentage :\n");
                scanf("%f[.2]",&st[j].percentage);
                break;
            }
        }
    }
    printf("Update successfully!\n");
}
void sort_by_percentage() {
    printf("percentage     Grade\n");
    printf("   40<          Fail\n");
    printf("40>= & 60<        D\n");
    printf("60>= & 80<        C\n");
    printf("80>= & 90<        B\n");
    printf("   90>=           A\n ");
    printf("Enter choice for Grade\n1.A \n2.B\n3.C\n4.D\n5.Fail\n6.exit\n");
    int choice;
    printf("Enter choice:");
    scanf("%d",&choice);
    switch(choice) {
    case 1:
        printf("A Grade student PRN no. list\n");
        for(int j=0; j<i; j++) {
            if(st[j].percentage>=90) {
                printf("%d\n",st[j].prn_number);
            }
        }
        break;
    case 2:
        printf("B Grade student PRN no. list\n");
        for(int j=0; j<i; j++) {
            if(st[j].percentage>=80 || st[j].percentage<90) {
                printf("%d\n",st[j].prn_number);
            }
        }
        break;
    case 3:
        printf("C Grade student PRN no. list\n");
        for(int j=0; j<i; j++) {
            if(st[j].percentage>=60 || st[j].percentage<80) {
                printf("%d\n",st[j].prn_number);
            }
        }
        break;
    case 4:
        printf("D Grade student PRN no. list\n");
        for(int j=0; j<i; j++) {
            if(st[j].percentage>=40 || st[j].percentage<60) {
                printf("%d\n",st[j].prn_number);
            }
        }
        break;
    case 5:
        printf("fail student PRN no. list\n");
        for(int j=0; j<i; j++) {
            if(st[j].percentage<40) {
                printf("%d\n",st[j].prn_number);
            }
        }
        break;
    }
}
void main() {
    printf("Task that you want to preform:\n");
    printf("1.Add student details:\n");
    printf("Find student detail\n");
    printf("2.by PRN number:\n");
    printf("3.by Student name:\n");
    printf("4.total number of student\n"
           " in particular branch:\n");
    printf("5.total number of student:\n");
    printf("6.Delete student detail :\n");
    printf("7.Update student detail :\n");
    printf("8.Exit\n");
    int task_code,x;
    while(1) {
        printf("Enter task code do you want to perform:\n");
        scanf("%d",&task_code);
        switch(task_code) {
        case 1:
            add_student();
            break;
        case 2:
            printf("Enter Roll Number:\n");
            scanf("%d",&x);
            find_prn_number(x);
            break;
        case 3:
            find_first_name();
            break;
        case 4:
            printf("Enter branch code[CSE=11,IT=12,ENTC=13,CE=14,ME=15]:\n\n");
            scanf("%d",&x);
            find_st_by_branch_code(x);

            break;
        case 5:
            total_no_of_students();
            break;
        case 6:
            printf("Enter Roll Number:\n");
            scanf("%d",&x);
            delete_student(x);
            break;
        case 7:
            printf("Enter roll number to update the student detail:\n");
            scanf("%d",&x);
            update_student(x);
            break;
        case 8:
            sort_by_percentage();
            break;

        case 9:
            exit(0);
            break;
        }
    }
}
